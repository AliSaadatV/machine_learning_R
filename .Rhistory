install.packages("AmesHousing")
ames <- AmesHousing::make_ames()
ames
AmesHousing::make_ames()
AmesHousing::make_ames
View(ames)
AmesHousing::make_ames()
AmesHousing::ames_raw
AmesHousing::make_ordinal_ames()
AmesHousing::make_ordinal_ames
AmesHousing::make_ames()
AmesHousing::make_ames
AmesHousing::make_ames_new()
AmesHousing::make_ames_new
AmesHousing::ames_new
AmesHousing::ames_new()
AmesHousing::ames_new
install.packages("rsample")
install.packages("rsample")
install.packages("rsample")
install.packages("rsample")
install.packages("rsample")
rsample::attrition
data("attrition", package = "modeldata")
install.packages("modeldata")
# Helper packages
library(dplyr)     # for data manipulation
library(ggplot2)   # for awesome graphics
# Modeling process packages
library(rsample)   # for resampling procedures
library(caret)     # for resampling and model training
library(h2o)       # for resampling and model training
# h2o set-up
h2o.no_progress()  # turn off h2o progress bars
h2o.init()         # launch h2o
# Ames housing data
ames <- AmesHousing::make_ames()
ames.h2o <- as.h2o(ames)
ames.h2o
ames.h2o[1]
ames.h2o
View(ames)
# Job attrition data
churn <- rsample::attrition %>%
mutate_if(is.ordered, .funs = factor, ordered = FALSE)
churn <- modeldata::attrition
View(churn)
churn.h2o <- as.h2o(churn)
# Job attrition data
churn <- modeldata::attrition %>%
mutate_if(is.ordered, .funs = factor, ordered = FALSE)
churn.h2o <- as.h2o(churn)
View(churn.h2o)
churn.h2o
round(nrow(ames) * 0.7)
### Simple sampling
# Using base R
set.seed(123)  # for reproducibility
index_1 <- sample(1:nrow(ames), round(nrow(ames) * 0.7))
train_1 <- ames[index_1, ]
test_1  <- ames[-index_1, ]
index_2 <- createDataPartition(ames$Sale_Price, p = 0.7,
list = FALSE)
train_2 <- ames[index_2, ]
test_2  <- ames[-index_2, ]
View(index_2)
indee
head(index_2)
split_1  <- initial_split(ames, prop = 0.7)
split_1
train_3  <- training(split_1)
test_3   <- testing(split_1)
# Using h2o package
split_2 <- h2o.splitFrame(ames.h2o, ratios = 0.7,
seed = 123)
train_4 <- split_2[[1]]
test_4  <- split_2[[2]]
test_4
### Stratified sampling
# orginal response distribution
table(churn$Attrition) %>% prop.table()
# stratified sampling with the rsample package
set.seed(123)
split_strat  <- initial_split(churn, prop = 0.7,
strata = "Attrition")
train_strat  <- training(split_strat)
test_strat   <- testing(split_strat)
# consistent response ratio between train & test
table(train_strat$Attrition) %>% prop.table()
##
##       No      Yes
## 0.838835 0.161165
table(test_strat$Attrition) %>% prop.table()
?caret::trainControl()
model_fn(log10(Sale_Price) ~ ns(Longitude, df = 3) +
ns(Latitude, df = 3), data = ames)
# Helper packages
library(dplyr)     # for data manipulation
library(ggplot2)   # for awesome graphics
# Modeling process packages
library(rsample)   # for resampling procedures
library(caret)     # for resampling and model training
library(h2o)
model_fn(log10(Sale_Price) ~ ns(Longitude, df = 3) +
ns(Latitude, df = 3), data = ames)
model_fn(log10(Sale_Price) ~ ns(Longitude, df = 3) + ns(Latitude, df = 3), data = ames)
